<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="49" tokens="181">
<file line="53" path="C:\Users\Jose Zalacain\Documents\eclipse-jee-photon-workspace\prolobjectlink-jpi-tuprolog\src\main\java\io\github\prolobjectlink\prolog\tuprolog\TuPrologTypedParameter.java"/>
<file line="53" path="C:\Users\Jose Zalacain\Documents\eclipse-jee-photon-workspace\prolobjectlink-jpi-tuprolog\src\main\java\io\github\prolobjectlink\prolog\tuprolog\TuPrologTypedResult.java"/>
<codefragment>
<![CDATA[
	TuPrologTypedResult(TuProlog provider, String name, String kind) {
		super(provider, provider.newVariable(name, 0));
		this.kind = provider.newVariable(kind, 1);
	}

	public final int getArity() {
		return 2;
	}

	public final String getFunctor() {
		return "-";
	}

	@Override
	public PrologTerm getKey() {
		return getNameTerm();
	}

	@Override
	public PrologTerm getValue() {
		return kind;
	}

	@Override
	public PrologTerm setValue(PrologTerm value) {
		// this.type = value.getFunctor()
		getLogger().debug(getClass(), "No value setting allow");
		return kind;
	}

	public PrologTerm getKindTerm() {
		return getValue();
	}

	public String getKind() {
		PrologVariable v = (PrologVariable) kind;
		return v.getName();
	}

	@Override
	public String toString() {
		String name = getName();
		String tag = getFunctor();
		PrologVariable v = kind.cast();
		String type = v.getName();
		return name + tag + type;
	}

}
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="126">
<file line="53" path="C:\Users\Jose Zalacain\Documents\eclipse-jee-photon-workspace\prolobjectlink-jpi-tuprolog\src\main\java\io\github\prolobjectlink\prolog\tuprolog\TuPrologTypedField.java"/>
<file line="53" path="C:\Users\Jose Zalacain\Documents\eclipse-jee-photon-workspace\prolobjectlink-jpi-tuprolog\src\main\java\io\github\prolobjectlink\prolog\tuprolog\TuPrologTypedParameter.java"/>
<codefragment>
<![CDATA[
	TuPrologTypedParameter(TuProlog provider, String name, String kind) {
		super(provider, provider.newVariable(name, 0));
		this.kind = provider.newVariable(kind, 1);
	}

	public final int getArity() {
		return 2;
	}

	public final String getFunctor() {
		return "-";
	}

	@Override
	public PrologTerm getKey() {
		return getNameTerm();
	}

	@Override
	public PrologTerm getValue() {
		return kind;
	}

	@Override
	public PrologTerm setValue(PrologTerm value) {
		// this.type = value.getFunctor()
		getLogger().debug(getClass(), "No value setting allow");
		return kind;
	}

	public PrologTerm getKindTerm() {
		return getValue();
	}

	public String getKind() {
		PrologVariable v = (PrologVariable) kind;
]]>
</codefragment>
</duplication>
</pmd-cpd>